#!/bin/bash

set -euo pipefail

# global variables
# list of update avaliable packages
_aur_builder_target_packages=()
_aur_builder_dockerfile_dir="$(ghq root)/github.com/colajam93/aur-builder"
_aur_builder_output_path="${HOME}/Downloads:/home/builder/pkg"

# functions
_aur_builder_echoerr() {
    echo "$@" 1>&2; 
}

_aur_builder_build_image() {
    DOCKER_BUILDKIT=1 docker build --pull --no-cache -t aur-builder "${_aur_builder_dockerfile_dir}"
}

_aur_builder_list_package() {
    pacman -Ss | grep 'aur/' | sed 's:^aur/\([a-z0-9-]*\) .*$:\1:'
}

_aur_builder_get_local_name() {
    local package
    package=$1
    pacman -Qi "${package}" 2> /dev/null | grep Name | sed 's/^.*: \(.*\)$/\1/'
}

_aur_builder_get_local_version() {
    local package
    package=$1
    pacman -Qi "${package}" 2> /dev/null | grep Version | sed 's/^.*: \(.*\)$/\1/'
}

_aur_builder_collect_package_info() {
    local i
    local local_version
    local aur_version
    local aur_info

    aur_info=$(curl -sS 'https://aur.archlinux.org/rpc/v5/info?arg[]='"$(_aur_builder_list_package | tr '\n' ' ' | sed 's/ /\&arg\[\]=/g')" \
        | jq -cr '.results[] | "\(.PackageBase);\(.Version)"')
    for i in $aur_info; do
        IFS=';' read -r name aur_version <<< "$i"
        local_name="$(_aur_builder_get_local_name "$name")"
        if [[ "${local_name}" != "$name" ]]; then
            local_version=''
            aur_version=''
            echo '{"name": "'"$name"'", "local": "'"$local_version"'", "aur": "'"$aur_version"'"}' | jq -c .
            continue
        fi
        local_version=$(_aur_builder_get_local_version "$name")
        echo '{"name": "'"$name"'", "local": "'"$local_version"'", "aur": "'"$aur_version"'"}' | jq -c .
    done
}

_aur_builder_collect_update_avaiable_package() {
    local i
    local local_version
    local aur_version
    local name
    local package_info
    package_info="$1"
    for i in $(echo "${package_info}" | jq -rc '.'); do
        name=$(echo "$i" | jq -r '.name')
        local_version=$(echo "$i" | jq -r '.local')
        aur_version=$(echo "$i" | jq -r '.aur')
        if [[ -z "${local_version}" ]]; then
            echo "${name} is not installed. skipping"
            continue
        fi
        if [[ -z "${aur_version}" ]]; then
            echo "${name} is not exists in AUR. skipping"
            continue
        fi
        if [[ "${local_version}" == "${aur_version}" ]]; then
            if [[ $VERBOSE == "TRUE" ]]; then
                echo "${name} is up-to-date. skipping"
            fi
            continue
        fi
        echo "${name}: ${local_version} => ${aur_version}"
        _aur_builder_target_packages+=("$name")
    done
}

_aur_builder_build_package() {
    if [[ ${#_aur_builder_target_packages[@]} -eq 0 ]]; then
        return
    fi
    docker run --rm -v "${_aur_builder_output_path}" aur-builder -S "${_aur_builder_target_packages[@]}" --noconfirm
}

_aur_builder_shell() {
    docker run --rm --entrypoint=/bin/bash -it -v "${_aur_builder_output_path}" aur-builder
}

_aur_builder_help() {
    echo "aur-builder build-image|check-package|build-package"
}

# main
POSITIONAL=()
VERBOSE=FALSE
while [[ $# -gt 0 ]]
do
key="$1"
case $key in
    -v|--verbose)
    VERBOSE=TRUE
    shift
    ;;
    *)
    POSITIONAL+=("$1")
    shift
    ;;
esac
done
set -- "${POSITIONAL[@]}"

if [[ $# -eq 0 ]]; then
    _aur_builder_help
    exit 1
fi

cmd=$1
if [[ $cmd == "build-image" ]]; then
    _aur_builder_build_image
elif [[ $cmd == "check-package" ]]; then
    package_info="$(_aur_builder_collect_package_info)"
    _aur_builder_collect_update_avaiable_package "${package_info}"
elif [[ $cmd == "build-package" ]]; then
    package_info="$(_aur_builder_collect_package_info)"
    _aur_builder_collect_update_avaiable_package "${package_info}"
    _aur_builder_build_package
elif [[ $cmd == "shell" ]]; then
    _aur_builder_shell
else
    _aur_builder_help
fi
